---
export interface Props {
  id: string;
  white?: boolean;
  horizontal?: boolean;
}

const { id, white, horizontal } = Astro.props;
const hasTitlesSection = Astro.slots.has('eyebrow') || Astro.slots.has('title') || Astro.slots.has('subtitle')
const hasEyebrow = Astro.slots.has('eyebrow')
const hasTitle =  Astro.slots.has('title')
const hasSubTitle = Astro.slots.has('subtitle')
const hasLead = Astro.slots.has('lead')
const hasContent = Astro.slots.has('content')

---

<section
  id={id}
  class={`flex scroll-pt-24 flex-col items-center gap-6 px-4 md:px-8 pt-24 ${white ? 'bg-white' : 'bg-section'}`}
>
  {horizontal ? (
    <div class="flex flex-col md:flex-row w-full max-w-6xl gap-12 md:gap-24 items-center justify-center mb-24">
      <div class="flex flex-col flex-1 gap-4 px-8 md:px-0">
        {hasTitlesSection && (
          <div>
            {hasEyebrow && <slot name="eyebrow" />}
            {hasTitle && <h2 class="font-bold tracking-tight text-6xl"><slot name="title" /></h2>}
            {hasSubTitle && <h3 class="font-bold tracking-tight text-4xl"><slot name="subtitle" /></h3>}
          </div>
        )}
        {hasLead && <p class="max-w-xl text-md"><slot name="lead" /></p>}
      </div>
      {hasContent && (
        <div class="w-full flex-1 flex justify-center">
          <slot name="content" />
        </div>
      )}
    </div>
  ) : (
    <Fragment>
      {hasTitlesSection && (
        <div class="flex flex-col items-center gap-4 max-w-4xl">
          {hasEyebrow && <slot name="eyebrow" />}
          {hasTitle && <h2 class="text-center font-bold tracking-tight text-6xl"><slot name="title" /></h2>}
          {hasSubTitle && <h3 class="text-center font-bold tracking-tight text-4xl"><slot name="subtitle" /></h3>}
        </div>
      )}
      {hasLead && <p class="max-w-xl text-center text-md"><slot name="lead" /></p>}
      {hasContent && <div class="flex flex-col w-full max-w-6xl flex-col items-center"><slot name="content"/></div>}
    </Fragment>
  )}
</section>
